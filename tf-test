#! /usr/bin/env python

"""

  e_t<-
 / /
s_f

"""

# 30/4/23 DH: Refactor of TFConfig class
from tf_config_train import *
from tf_config_rl import *

# 2/5/23 DH:
import click

# 2/5/23 DH:
from dqn_c51 import *

class MNISTerrors(object):

  def __init__(self, integer=False) -> None:
    
    self.tfConfigTrain = TFConfigTrain(integer=integer)
    self.tfConfigRL = TFConfigRL(self.tfConfigTrain, integer=integer)

# https://click.palletsprojects.com/en/8.1.x/commands/#group-invocation-without-command
@click.group(invoke_without_command=True)

@click.pass_context
def cli(ctx):
  """
  The Sequential DNN is trained with MNIST digits:

    a) high level with Supervised Learning

    b) 50% level prior to Reinforcement Learning
  
  Categorical DQN uses OpenAI Gym for CartPole physics
  """
  if not ctx.invoked_subcommand:
    train()
  else:
    pass

@cli.command()
@click.argument('int',required=False)
def train(int):
  """
  Train the TF Sequential DNN with Supervised Learning

    1) "int" = Leave the images as integers (rather than convert to floats)
  """
  click.echo('\nTrain the TF DNN')

  # ---------------- Load float or integer images -----------------
  if int:
    if "int" in int:
      print("\nTrain with integer rather than float images")

      mnistErrors = MNISTerrors(integer=True)
      x_trainSet = mnistErrors.tfConfigTrain.x_train[:700]
      y_trainSet = mnistErrors.tfConfigTrain.y_train[:700]
    else:
      ctx = click.get_current_context()
      click.echo(ctx.get_help())
      ctx.exit()
  
  else:
    mnistErrors = MNISTerrors()

    # 24/4/23 DH:
    x_trainSet = mnistErrors.tfConfigTrain.x_train[:700]
    y_trainSet = mnistErrors.tfConfigTrain.y_train[:700]
    #x_trainSet = x_train[:2000]
    #y_trainSet = y_train[:2000]
  # --------------------------------------------------------------
    
  # 1/4/23 DH: List of dicts for DNN params
  paramDictList = [
    #{'dense1': 784, 'dropout1': None, 'trainingNum': x_train.shape[0], 'epochs': 5, 'runs': 1, 'reruns': 1 },
    
    {'dense1': 20, 'dropout1': None, 'epochs': 1, 'x_trainSet': x_trainSet, 'y_trainSet': y_trainSet,
     'trainingNum': x_trainSet.shape[0], 'runs': 1, 'reruns': 1 },
    ]

  mnistErrors.tfConfigTrain.batchRunAshore(paramDictList)

@cli.command()
def rl():
  """
  Train the TF Sequential DNN with Reinforcement Learning
  """
  click.echo('\nTrain the TF DNN via RL')

  mnistErrors = MNISTerrors()

  # 24/4/23 DH:
  x_trainSet = mnistErrors.tfConfigTrain.x_train[:700]
  y_trainSet = mnistErrors.tfConfigTrain.y_train[:700]
  #x_trainSet = x_train[:2000]
  #y_trainSet = y_train[:2000]

  # 1/4/23 DH: List of dicts for DNN params
  paramDictList = [
    
    {'dense1': 20, 'dropout1': None, 'epochs': 1, 'x_trainSet': x_trainSet, 'y_trainSet': y_trainSet,
     'trainingNum': x_trainSet.shape[0], 'runs': 1, 'reruns': 1 },
    ]

  # 24/4/23 DH:
  mnistErrors.tfConfigRL.rlRun(paramDictList)

@cli.command()
def cartpole():
  """
  Train the TF Categorical DQN with Reinforcement Learning
  """
  click.echo('\nTrain the TF DNN via Cartpole')

  dqn = DQNc51()
  dqn.trainCartPole()
  dqn.displayResults()

# 5/5/23 DH:
@cli.command()
@click.argument('check',required=False)
@click.argument('digit',required=False)
def mnist(check,digit):
  """
  Get example of an image for each digit

    1) "check"       = Check all the images

       "check [0-9]" = Check [0-9] image
  """
  click.echo("\nMNIST image file creation/check")
  
  tfCfg = TFConfig()

  if check:
    if digit:
      print(digit)
      tfCfg.checkMNISTexamples(digit)
    else:
      tfCfg.checkMNISTexamples()
  else:
    tfCfg.getMNISTexamples()

# 6/5/23 DH:
@cli.command()
@click.argument('arg',required=False)
def bitwise(arg):
  """
  Test correlation of 'y_test[index]' with bitwise-AND

    1) "convert" = Convert the digit dictionary from float to integers

    2) "check"   = Check ID of example images
  """
  tfCfg = TFConfig()

  if arg:
    if "convert" in arg:
      tfCfg.convertDigitDict()
    elif "check" in arg:
      print("Check ID of example images")
      tfCfg.bitwiseAND(check=True)
    else:
      ctx = click.get_current_context()
      click.echo(ctx.get_help())
      ctx.exit()
    
  else:
    tfCfg.bitwiseAND()

# 30/3/23 DH:
if __name__ == '__main__':
  
  cli()

