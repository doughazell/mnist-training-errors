#! /usr/bin/env python

"""

  e_t<-
 / /
s_f

"""

# 30/4/23 DH: Refactor of TFConfig class
from tf_config_train import *
from tf_config_rl import *

# 2/5/23 DH:
import click

# 2/5/23 DH:
from dqn_c51 import *

"""
Load and prepare the [MNIST dataset](http://yann.lecun.com/exdb/mnist/). 
Convert the sample data from integers to floating-point numbers 
("The training set contains 60000 examples, and the test set 10000 examples")
"""
# http://yann.lecun.com/exdb/mnist/
mnist = tf.keras.datasets.mnist
# https://www.tensorflow.org/api_docs/python/tf/keras/datasets/mnist/load_data()
(x_train, y_train), (x_test, y_test) = mnist.load_data()
x_train, x_test = x_train / 255.0, x_test / 255.0

class MNISTerrors(object):

  def __init__(self) -> None:
    
    self.tfConfigTrain = TFConfigTrain()
    self.tfConfigRL = TFConfigRL(self.tfConfigTrain)

# 2/5/23 DH: Add cmd line arg:
#  train
#  rl
#  cartpole

# https://click.palletsprojects.com/en/8.1.x/commands/#group-invocation-without-command
@click.group(invoke_without_command=True)

@click.pass_context
def cli(ctx):
  """
  The Sequential DNN is trained with MNIST digits:

    a) high level with Supervised Learning

    b) 50% level prior to Reinforcement Learning
  
  Categorical DQN uses OpenAI Gym for CartPole physics
  """
  if not ctx.invoked_subcommand:
    train()
  else:
    pass

@cli.command()
def train():
  """
  Train the TF Sequential DNN with Supervised Learning
  """
  click.echo('\nTrain the TF DNN')

  mnistErrors = MNISTerrors()

  # 24/4/23 DH:
  x_trainSet = x_train[:700]
  y_trainSet = y_train[:700]
  #x_trainSet = x_train[:2000]
  #y_trainSet = y_train[:2000]

  # 1/4/23 DH: List of dicts for DNN params
  paramDictList = [
    #{'dense1': 784, 'dropout1': None, 'trainingNum': x_train.shape[0], 'epochs': 5, 'runs': 1, 'reruns': 1 },
    
    {'dense1': 20, 'dropout1': None, 'epochs': 1, 'x_trainSet': x_trainSet, 'y_trainSet': y_trainSet,
     'trainingNum': x_trainSet.shape[0], 'runs': 1, 'reruns': 1 },
    ]
  
  mnistErrors.tfConfigTrain.batchRunAshore(paramDictList)

@cli.command()
def rl():
  """
  Train the TF Sequential DNN with Reinforcement Learning
  """
  click.echo('\nTrain the TF DNN via RL')

  mnistErrors = MNISTerrors()

  # 24/4/23 DH:
  x_trainSet = x_train[:700]
  y_trainSet = y_train[:700]
  #x_trainSet = x_train[:2000]
  #y_trainSet = y_train[:2000]

  # 1/4/23 DH: List of dicts for DNN params
  paramDictList = [
    
    {'dense1': 20, 'dropout1': None, 'epochs': 1, 'x_trainSet': x_trainSet, 'y_trainSet': y_trainSet,
     'trainingNum': x_trainSet.shape[0], 'runs': 1, 'reruns': 1 },
    ]

  # 24/4/23 DH:
  mnistErrors.tfConfigRL.rlRun(paramDictList)

@cli.command()
def cartpole():
  """
  Train the TF Categorical DQN with Reinforcement Learning
  """
  click.echo('\nTrain the TF DNN via Cartpole')

  dqn = DQNc51()
  dqn.trainCartPole()
  dqn.displayResults()

# 5/5/23 DH:
@cli.command()
@click.argument('check',required=False)
def mnist(check):
  """
  Get example of an image for each digit
  """
  click.echo("\nMNIST image file creation")
  
  tfCfg = TFConfig()

  if check:
    tfCfg.checkMNISTexamples()
  else:
    tfCfg.getMNISTexamples()

# 30/3/23 DH:
if __name__ == '__main__':
  
  cli()

